heat_template_version: 2013-05-23

description: |
  This is a Heat template to deploy a single Linux server running RabbitMQ

parameter_groups:

- label: Server Settings
  parameters:
  - image
  - flavor

- label: rax-dev-params
  parameters:
  - server_hostname

parameters:

  server_hostname:
    label: Server Name
    description: Hostname to use for setting the server name.
    type: string
    default: rabbit-%index%
    constraints:
    - length:
        min: 1
        max: 64

  image:
    label: Operating System
    description: |
      Server image used for all servers that are created as a part of this
      deployment
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      description: Must be a supported operating system.

  flavor:
    label: Server Size
    description: |
      Rackspace Cloud Server flavor to use. The size is based on the amount of
      RAM for the provisioned server.
    type: string
    default: 4 GB General Purpose v1
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O v1
      - 30 GB I/O v1
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  rabbitmq_node_count:
    label: Node Count
    description: The number of nodes in your RabbitMQ cluster.
    type: number
    default: 1
    constraints:
    - allowed_values:
      - 1
      - 3
      - 5
      description: Must be an odd number between 1 and 5, inclusive.

resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  rabbitmq_erlang_cookie:
    type: OS::Heat::RandomString
    properties:
      length: 128
      sequence: lettersdigits

  wait_condition:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: wait_condition_handle }
      timeout: 600

  wait_condition_handle:
    type: OS::Heat::SwiftSignalHandle

  rabbitmq_server:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: rabbitmq_node_count }
      resource_def:
        type: "OS::Nova::Server"
        properties:
          name: { get_param: server_hostname }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_resource: ssh_key }
          metadata:
            rax-heat: { get_param: "OS::stack_id" }
          config_drive: "true"
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                #cloud-config
                apt_sources:
                  - source: "deb http://www.rabbitmq.com/debian/ testing main"
                    keyid: F7B8CEA6056E8E56
                package_update: true
                packages:
                  - curl
                  - python-pip
                  - rabbitmq-server
                write_files:
                  - path: /etc/rabbitmq/rabbitmq-env.conf
                    permissions: '0644'
                    content: |
                      RABBITMQ_NODENAME=rabbit@`/sbin/ifconfig eth0 | /usr/bin/awk '/inet addr/ {split($2,address,":"); print address[2]}'`
                  - path: /var/lib/rabbitmq/.erlang.cookie
                    permissions: '0400'
                    content: |
                      %rabbitmq_erlang_cookie%
                  - path: /tmp/node_number
                    permissions: 600
                    content: |
                      %index%
                  - path: /root/setup/install_rabbitmq.sh
                    permissions: '0500'
                    content: |
                      #!/bin/bash -ex

                      pip install requests

                      error() {
                        echo "ERROR: exiting at line $1"
                        python -c 'import json,requests;requests.put("%wc_notify%",data=json.dumps({"status":"FAILURE","data":open("/var/log/cloud-init-output.log").read()}))'
                        exit "${3:-1}"
                      }

                      trap 'error ${LINENO}' ERR

                      python -c 'import json,requests;requests.put("%wc_notify%",data=json.dumps({"status":"SUCCESS","data":open("/var/log/cloud-init-output.log").read()}))'
                runcmd:
                  - /root/setup/install_rabbitmq.sh
              params:
                  '%server_hostname%': { get_param: server_hostname }
                  '%wc_notify%': { get_attr: ['wait_condition_handle', 'endpoint'] }
                  '%rabbitmq_erlang_cookie%': { get_attr: [rabbitmq_erlang_cookie, value] }

outputs:
  private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }

  server_ip:
    description: Server IP
    value: { get_attr: [rabbitmq_server, accessIPv4] }

  server_data:
    value: { get_attr: [ wait_condition, data ] }
    description: Data from wait condition to report script status
