heat_template_version: 2013-05-23

description: |
  This is a Heat template to deploy a RabbitMQ cluster

parameter_groups:

- label: Server Settings
  parameters:
  - image
  - flavor

- label: rax-dev-params
  parameters:
  - server_hostname

parameters:

  server_hostname:
    label: Server Name
    description: Hostname to use for setting the server name.
    type: string
    default: rabbit-%index%
    constraints:
    - length:
        min: 1
        max: 64

  image:
    label: Operating System
    description: |
      Server image used for all servers that are created as a part of this
      deployment
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      description: Must be a supported operating system.

  flavor:
    label: Server Size
    description: |
      Rackspace Cloud Server flavor to use. The size is based on the amount of
      RAM for the provisioned server.
    type: string
    default: 4 GB General Purpose v1
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O v1
      - 30 GB I/O v1
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  rabbitmq_node_count:
    label: Node Count
    description: The number of nodes in your RabbitMQ cluster.
    type: number
    default: 1
    constraints:
    - allowed_values:
      - 1
      - 2
      - 4
      description: Must be an odd number between 1 and 5, inclusive.

  rabbitmq_user:
    label: initial RabbitMQ user account
    description: The name of the initial RabbitMQ login account
    type: string
    default: rabbitmq

resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  rabbitmq_erlang_cookie:
    type: OS::Heat::RandomString
    properties:
      length: 128
      sequence: lettersdigits

  consul_key:
    type: OS::Heat::RandomString
    properties:
      length: 16
      sequence: lettersdigits

  rabbitmq_user_password:
    type: OS::Heat::RandomString
    properties:
      length: 32
      sequence: lettersdigits

  wait_condition:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: wait_condition_handle }
      timeout: 600

  wait_condition_handle:
    type: OS::Heat::SwiftSignalHandle

  rabbitmq_network:
    type: Rackspace::Cloud::Network
    properties:
      label: rabbitmq_network
      cidr: 192.168.134.0/24

  rabbit_nucleus:
    type: "OS::Nova::Server"
    properties:
      name: rabbit-nucleus #{ get_param: server_hostname }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: jgb-macbookair # { get_resource: ssh_key }
      networks:
      - uuid: "00000000-0000-0000-0000-000000000000"
      - uuid: "11111111-1111-1111-1111-111111111111"
      - uuid: { get_resource: rabbitmq_network }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      config_drive: "true"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            apt_sources:
              - source: "deb http://www.rabbitmq.com/debian/ testing main"
                keyid: F7B8CEA6056E8E56
            package_update: true
            packages:
              - curl
              - python-pip
              - rabbitmq-server
              - unzip
              - supervisor
              - dnsmasq
            write_files:
              - path: /var/lib/rabbitmq/.erlang.cookie
                permissions: '0400'
                content: |
                  %rabbitmq_erlang_cookie%
              - path: /etc/supervisor/conf.d/consul.conf
                permissions: '0644'
                content: |
                  [program:consul]
                  command=/usr/local/lib/supervisor/start_consul.sh
                  autostart=true
                  autorestart=true
                  stderr_logfile=/var/log/consul.log
                  stdout_logfile=/var/log/consul.log
              - path: /usr/local/lib/supervisor/start_consul.sh
                permissions: '0700'
                content: |
                  #! /bin/bash
                  exec consul agent \
                  -server \
                  -bind $(ifconfig eth2|awk '/inet addr/{ split($2,a,":");print a[2]}') \
                  -bootstrap-expect %rabbitmq_node_count% \
                  -encrypt $(echo -n %consul_key%|/usr/bin/base64) \
                  -data-dir /tmp/consul
              - path: /etc/dnsmasq.d/consul_dns.conf
                permissions: '0644'
                content: |
                  server=/consul/127.0.0.1#8600
              - path: /root/setup/requirements.txt
                permissions: '0500'
                content: |
                  requests
                  python-consul
              - path: /root/setup/show_registered_hosts
                permissions: '0500'
                content: |
                  #! /usr/bin/env python
                  import consul, json
                  c = consul.Consul()
                  index, host_keys = c.kv.get("rabbit/hosts",recurse=True)
                  for key in host_keys:
                    hostname = key.get("Key").split("/").pop()
                    ip = key.get("Value")
                    print ip, hostname
              - path: /root/setup/install_rabbitmq.sh
                permissions: '0500'
                content: |
                  #!/bin/bash -ex

                  rabbitmqctl delete_user guest
                  rabbitmqctl add_user %rmq_user% %rmq_password%

                  ufw allow 22    # ssh
                  ufw enable

                  ufw allow 4369  # RabbitMQ Erlang Port Mapper Daemon (epmd)
                  ufw allow 35197 # RabbitMQ Erlang clustering
                  ufw allow 25672 # RabbitMQ Management console
                  ufw allow 5672  # RabbitMQ ampq

                  ufw allow 8600  # consul DNS
                  ufw allow 8500  # consul HTTP API
                  ufw allow 8400  # consul RPC
                  ufw allow 8300  # consul server RPC
                  ufw allow 8301  # consul serf LAN port
                  ufw allow 8302  # consul serf WAN port

                  ( cd /root/setup/ && pip install -r requirements.txt )

                  trap 'error ${LINENO}' ERR

                  wget -O /tmp/consul.zip https://dl.bintray.com/mitchellh/consul/0.5.0_linux_amd64.zip
                  unzip -d /usr/local/bin/ /tmp/consul.zip

                  while (supervisorctl status consul | grep -v RUNNING)
                  do
                    echo "Waiting for consul service status RUNNING..."
                    sleep 5
                  done

                  desired_node_count=$(expr %rabbitmq_node_count% + 1)

                  while true
                  do
                    line_count=$(consul members | wc -l)
                    node_count=$(expr $line_count - 1 )
                    if [ $node_count -lt $desired_node_count ]; then
                      echo "Only $node_count members, waiting for $desired_node_count..."
                      sleep 5
                    else
                      break
                    fi
                  done

                  eth0_ip=$(ifconfig eth0 | awk '/inet addr/ { split($2,a,":"); print a[2]}')

                  curl -X PUT -d $eth0_ip http://localhost:8500/v1/kv/rabbit/hosts/$HOSTNAME

                  while true
                  do
                    registered_nodes=$(/root/setup/show_registered_hosts | wc -l)
                    if [ $desired_node_count -gt $registered_nodes ]; then
                      echo "waiting for all $desired_node_count nodes to register, currently $registered_nodes have..."
                      sleep 5
                    else
                      echo "got $registered_nodes out of $desired_node_count. Proceeding..."
                      break
                    fi
                  done

                  /root/setup/show_registered_hosts >> /etc/hosts

                  python -c 'import json,requests;requests.put("%wc_notify%",data=json.dumps({"status":"SUCCESS","data":open("/var/log/cloud-init-output.log").read()}))'
            runcmd:
              - /root/setup/install_rabbitmq.sh
          params:
              '%server_hostname%': { get_param: server_hostname }
              '%wc_notify%': { get_attr: ['wait_condition_handle', 'endpoint'] }
              '%rabbitmq_erlang_cookie%': { get_attr: [rabbitmq_erlang_cookie, value] }
              '%rabbitmq_node_count%': { get_param: ['rabbitmq_node_count'] }
              '%consul_key%': { get_attr: [consul_key, value] }
              '%rmq_user%': { get_param: rabbitmq_user }
              '%rmq_password%': { get_attr: [rabbitmq_user_password, value] }

  rabbitmq_servers:
    depends_on: rabbit_nucleus
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: rabbitmq_node_count }
      resource_def:
        type: "OS::Nova::Server"
        properties:
          name: { get_param: server_hostname }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: jgb-macbookair # { get_resource: ssh_key }
          networks:
          - uuid: "00000000-0000-0000-0000-000000000000"
          - uuid: "11111111-1111-1111-1111-111111111111"
          - uuid: { get_resource: rabbitmq_network }
          metadata:
            rax-heat: { get_param: "OS::stack_id" }
          config_drive: "true"
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                #cloud-config
                apt_sources:
                  - source: "deb http://www.rabbitmq.com/debian/ testing main"
                    keyid: F7B8CEA6056E8E56
                package_update: true
                packages:
                  - curl
                  - python-pip
                  - rabbitmq-server
                  - unzip
                  - supervisor
                  - dnsmasq
                write_files:
                  - path: /var/lib/rabbitmq/.erlang.cookie
                    permissions: '0400'
                    content: |
                      %rabbitmq_erlang_cookie%
                  - path: /etc/supervisor/conf.d/consul.conf
                    permissions: '0644'
                    content: |
                      [program:consul]
                      command=/usr/local/lib/supervisor/start_consul.sh
                      autostart=true
                      autorestart=true
                      stderr_logfile=/var/log/consul.log
                      stdout_logfile=/var/log/consul.log
                  - path: /usr/local/lib/supervisor/start_consul.sh
                    permissions: '0700'
                    content: |
                      #! /bin/bash
                      exec consul agent \
                      -server \
                      -bind $(ifconfig eth2|awk '/inet addr/{ split($2,a,":");print a[2]}') \
                      -encrypt $(echo -n %consul_key%|/usr/bin/base64) \
                      -data-dir /tmp/consul
                  - path: /etc/dnsmasq.d/consul_dns.conf
                    permissions: '0644'
                    content: |
                      server=/consul/127.0.0.1#8600
                  - path: /root/setup/requirements.txt
                    permissions: '0500'
                    content: |
                      requests
                      python-consul
                  - path: /root/setup/show_registered_hosts
                    permissions: '0500'
                    content: |
                      #! /usr/bin/env python
                      import consul, json
                      c = consul.Consul()
                      index, host_keys = c.kv.get("rabbit/hosts",recurse=True)
                      for key in host_keys:
                        hostname = key.get("Key").split("/").pop()
                        ip = key.get("Value")
                        print ip, hostname
                  - path: /root/setup/install_rabbitmq.sh
                    permissions: '0500'
                    content: |
                      #!/bin/bash -ex
                      ufw allow 22    # ssh
                      ufw enable
                      ufw allow 4369  # RabbitMQ Erlang Port Mapper Daemon (epmd)
                      ufw allow 35197 # RabbitMQ Erlang clustering
                      ufw allow 25672 # RabbitMQ Management console
                      ufw allow 5672  # RabbitMQ ampq

                      ufw allow 8600  # consul DNS
                      ufw allow 8500  # consul HTTP API
                      ufw allow 8400  # consul RPC
                      ufw allow 8300  # consul server RPC
                      ufw allow 8301  # consul serf LAN port
                      ufw allow 8302  # consul serf WAN port

                      ( cd /root/setup/ && pip install -r requirements.txt )

                      trap 'error ${LINENO}' ERR

                      wget -O /tmp/consul.zip https://dl.bintray.com/mitchellh/consul/0.5.0_linux_amd64.zip
                      unzip -d /usr/local/bin/ /tmp/consul.zip

                      while (supervisorctl status consul | grep -v RUNNING)
                      do
                        echo "Waiting for consul service status RUNNING..."
                        sleep 5
                      done

                      echo "waiting for cluster to stabilize..."
                      sleep 10

                      /usr/local/bin/consul join %rabbitmq_nucleus_publicip%

                      desired_node_count=$(expr %rabbitmq_node_count% + 1)

                      while true
                      do
                        line_count=$(consul members | wc -l)
                        node_count=$(expr $line_count - 1 )
                        if [ $node_count -lt $desired_node_count ]; then
                          echo "Only $node_count members, waiting for $desired_node_count..."
                          sleep 5
                        else
                          break
                        fi
                      done

                      sleep 15

                      eth0_ip=$(ifconfig eth0 | awk '/inet addr/ { split($2,a,":"); print a[2]}')

                      curl -X PUT -d $eth0_ip http://localhost:8500/v1/kv/rabbit/hosts/$HOSTNAME

                      while true
                      do
                        registered_nodes=$(/root/setup/show_registered_hosts | wc -l)
                        if [ $desired_node_count -gt $registered_nodes ]; then
                          echo "waiting for all $desired_node_count nodes to register, currently $registered_nodes have..."
                          sleep 5
                        else
                          echo "got $registered_nodes out of $desired_node_count. Proceeding..."
                          break
                        fi
                      done

                      /root/setup/show_registered_hosts >> /etc/hosts

                      rabbitmqctl stop_app && rabbitmqctl join_cluster rabbit@rabbit-nucleus && rabbitmqctl start_app

                      python -c 'import json,requests;requests.put("%wc_notify%",data=json.dumps({"status":"SUCCESS","data":open("/var/log/cloud-init-output.log").read()}))'
                runcmd:
                  - /root/setup/install_rabbitmq.sh
              params:
                  '%server_hostname%': { get_param: server_hostname }
                  '%wc_notify%': { get_attr: ['wait_condition_handle', 'endpoint'] }
                  '%rabbitmq_erlang_cookie%': { get_attr: [rabbitmq_erlang_cookie, value] }
                  '%rabbitmq_node_count%': { get_param: ['rabbitmq_node_count'] }
                  '%rabbitmq_nucleus_publicip%': { get_attr: [rabbit_nucleus, networks, rabbitmq_network, 0] }
                  '%consul_key%': { get_attr: [consul_key, value] }

outputs:
  private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }

  server_ip:
    description: Server IP
    value: { get_attr: [rabbit_nucleus, accessIPv4] }

  nucleus_private_ip:
    description: cloud network IP of rabbit-nucleus
    value: { get_attr: [rabbit_nucleus, networks, rabbitmq_network, 0] }

  server_data:
    value: { get_attr: [ wait_condition, data ] }
    description: Data from wait condition to report script status

  rabbitmq_user:
    value: { get_param: rabbitmq_user }
    description: The RabbitMQ user login which was created

  rabbitmq_password:
    value: { get_param: rabbitmq_password }
    description: The RabbitMQ user login password which was generated
